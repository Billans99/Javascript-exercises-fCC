/* code to revisit */

/*              Javascript Algorithm To-Do list
1. Golf Code
2. Counting Cards
3. Record Collection
4. Iterate through an array with a For Loop
5. Nesting For Loops
6. Replace loops using recursion
7. Profile lookup
8. parseInt with radix
ES6
9. Use class Syntax to Define a Constructor Function
Youtube javascript classes on youtube and do more little exercises
10. revisit spread operator and youtube















                ES6 Notes!

1. Compare Scopes of the var and let Keywords
Notes: 
    Declaring var will declare it globally or locally. Let can be
    be declared in a block, statement or expression. Let was introduced in 
    ES6, never use var. Remember to use const always unless you think it should
    be mutable.

2. Mutate an Array Declared with const
Notes: 
    You can declare const s = [5, 7, 2]; but cant redeclare it later 
    saying const s = [2, 7, 5]. You can however mutate the array e.g. s[0] = 2;
    s[1] = 7; s[2] = 5; After this your array would now be [2, 7, 5]. Nice!

3. Prevent Object Mutation
Notes: 
    Object.freeze(object);
    Properties cannot be added, deleted or changed, as well as their
    corresponding values.

4. Use Arrow Functions to Write Concise Anonymous Functions
Notes:
    Functions are usually written like this: 

    const myFunc = function() {
        const myVar = "value";
        return myVar;
    }
    However, with ES6 arrow functions look like this:{
        const myFunc = () => {
            const myVar = "value";
            return myVar;
        }
    When there is no body function and only a return value it can be shortened
    even further to this: 
        const myFunc = () => "value";

5. Write Arrow Functions with Parameters
Notes:
    Arrow functions can also parse parameters e.g.
        const doubler = (item) => item * 2;
        doubler(4);
    If there is only one parameter, the () parentheses can be removed. e.g.
        const doubler = item => item * 2;
        doubler(4);
    Here's an example of a two parameter arrow function.
        const multiplier = (item, multi) => item * multi;
        multiplier(4, 2);

6. Set Default Parameters for Your Functions
Notes:
    ES6 has default parameters for functions. 
        const greeting = (name = "Anonymous") => "Hello " + name;

        console.log(greeting("John"));
        console.log(greeting());
    The first console.log will display the strings Hello John, and the second
    will return Hello Anonymous.

7. Use the Rest Parameter with Function Parameters
    const sum = (...args) => {
        const sum = (...args) => {
            let total = 0;
            for (let i = 0; i < args.length; i++) {
            total += args[i];
            }
            return total;
        }
        console.log(sum(1, 2, 3)); // 6

8. Use the Spread Operator to Evaluate Arrays In-Place
    const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
    let arr2;
    
    arr2 = [...arr1];  // Change this line
    
    console.log(arr2);

9. Use Destructuring Assignment to Extract Values from Objects
    const HIGH_TEMPERATURES = {
        yesterday: 75,
        today: 77,
        tomorrow: 80
    };
    
    // Only change code below this line
    const {today} = HIGH_TEMPERATURES;
    const {tomorrow} = HIGH_TEMPERATURES
    
    // const today = HIGH_TEMPERATURES.today;
    // const tomorrow = HIGH_TEMPERATURES.tomorrow;
    
    // Only change code above this line

10. Use Destructuring Assignment to Assign Variables from Objects
    const HIGH_TEMPERATURES = {
        yesterday: 75,
        today: 77,
        tomorrow: 80
    };
    
    // Only change code below this line
    const {highToday: today} = HIGH_TEMPERATURES;
    const {highTomorrow: tomorrow} = HIGH_TEMPERATURES;
    
    const {today: highToday} = HIGH_TEMPERATURES; 
    const {tomorrow: highTomorrow} = HIGH_TEMPERATURES;
    // const highToday = HIGH_TEMPERATURES.today;
    // const highTomorrow = HIGH_TEMPERATURES.tomorrow; 
    
    // Only change code above this line

11. Use Destructuring Assignment to Assign Variables from Nested Objects
    const LOCAL_FORECAST = {
        yesterday: { low: 61, high: 75 },
        today: { low: 64, high: 77 },
        tomorrow: { low: 68, high: 80 }
    };
    
    // Only change code below this line
    const { today: {low: lowToday, high: highToday}} = LOCAL_FORECAST;  
    
    // const lowToday = LOCAL_FORECAST.today.low;
    // const highToday = LOCAL_FORECAST.today.high;
    
    // Only change code above this line

12. Use Destructuring Assignment to Assign Variables from Arrays
    let a = 8, b = 6;
    // Only change code below this line
    [a, b] = [b, a];

13. Destructuring via rest elements
    function removeFirstTwo(list) {
        const [a, b, ...newArray] = list;
        return newArray;
    }
    
    const source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    const sourceWithoutFirstTwo = removeFirstTwo(source);

14. Use Destructuring Assignment to Pass an Object as a Function's
    Parameters
    const stats = {
        max: 56.78,
        standard_deviation: 4.34,
        median: 34.54,
        mode: 23.87,
        min: -0.75,
        average: 35.85
    };
    
    // Only change code below this line
    const half = ({ max, min }) => (max + min) / 2.0;
    
    // Only change code above this line

15. Create Strings using Template Literals
    Notes: 
    Template literals are performed with backticks `` and 
    ${variable/object} or ${object.prop}

    const result = {
        success: ["max-length", "no-amd", "prefer-arrow-functions"],
        failure: ["no-var", "var-on-top", "linebreak"],
        skipped: ["no-extra-semi", "no-dup-keys"]
    };
    function makeList(arr) {
        // Only change code below this line
        const failureItems = [];
        for (let i = 0; i < arr.length; i++) {
        failureItems.push(`<li class="text-warning">${arr[i]}</li>`)
    
        }
        
        // Only change code above this line
    
        return failureItems;
    }
    
    const failuresList = makeList(result.failure);
        
16. Write Concise Object Literal Declarations Using Object Property
    Shorthand
    Notes:
    Use object property shorthand with object literals

    const createPerson = (name, age, gender) => 
    // Only change code below this line
    ({name, age, gender});

  17. Write Concise Declarative Functions with ES6
  notes: 
    functions can be declared in an object. Also the word "function" and
    colon can be removed in ES6 to make it look cleaner to read.

    // Only change code below this line
    const bicycle = {
        gear: 2,
        setGear(newGear) {
        this.gear = newGear;
        }
    };
    // Only change code above this line
    bicycle.setGear(3);
    console.log(bicycle.gear);

  18. Use class Syntax to Define a Constructor Function
  Notes: 
    - Classes are a blueprint for creating (it can also be referred to as 
    instantiating) objects
    - Classes can also have functions which are called methods
    - Classes can also have properties
    - The most common thing that you do in the constructor is to set properties 
    on the class
    - to create a new instance of a class, use the key word "new" and then 
    the class name. E.g "new Spaceship"
    - the constructor a method is a special method that is called when 
    creating an instance of a class
    - when accessing properties in the class, you will need to use the 
    key word "this" e.g this.myProperty
    - They typically use UpperCamelCase as the name e.g. SpaceShuttle . 

    // Only change code below this line
    class Vegetable {
    constructor(name) {
        this.name = name; 
    }
    }
    // Only change code above this line

    const carrot = new Vegetable('carrot');
    console.log(carrot.name); // Should display 'carrot'

19. Use getters and setters to Control Access to an Object
Notes: 
    Getter functions are meant to simply return (get) the value of an object's 
    private variable to the user without the user directly accessing the 
    private variable.

    Setter functions are meant to modify (set) the value of an object's private
    variable based on the value passed into the setter function. This change 
    could involve calculations, or even overwriting the previous value 
    completely.
    Getters and setters are important as they hide internal implementation 
    details. It is convention to put underscore because private variable _. 
    e.g. _author . Although doing it does not make it private.

    // Only change code below this line
    class Thermostat {
    constructor(fahrenheit) {
        this._fahrenheit = fahrenheit;
    }

    get temperature() {
        return 5/9 * (this._fahrenheit - 32);
    }

    set temperature(celcius) {
    return this._fahrenheit = (celcius * 9.0) / 5 + 32;
    }
    }
    // Only change code above this line

    const thermos = new Thermostat(76); // Setting in Fahrenheit scale
    let temp = thermos.temperature; // 24.44 in Celsius
    thermos.temperature = 26;
    temp = thermos.temperature; // 26 in Celsius

20. Create a module script. 
Notes: 
    With the `<script="module" src="index.js"></script>` you
    can export files for use in other files or import the parts you need, 
    where you need.

    <html>
    <body>
        <!-- Only change code below this line -->
    <script type="module" src="index.js"></script>
        <!-- Only change code above this line -->
    </body>
    </html>

21. Use export to Share a Code Block
Notes: The last line of code is how to export. In the example below, 
    the function names are used as arguments for the export in order to export 
    the functions.

    const uppercaseString = (string) => {
    return string.toUpperCase();
    }

    const lowercaseString = (string) => {
    return string.toLowerCase()
    }

    export {uppercaseString, lowercaseString};

    Here's another example.

    const add = (x, y) => {
    return x + y;
    }

    export { add };


22. Reuse JavaScript Code Using import
Notes: 
    Following from the export code from above, in the new file where you want 
    to import what you exported, write

    import {uppercaseString, lowercaseString} from './string_functions.js';
    // Only change code above this line
    uppercaseString("hello");
    lowercaseString("WORLD!");

    Here's another example:
    import { add } from './math_functions.js';


23. Use * to Import Everything from a File
Notes:
    To import everything from a file: use,
    import * as stringFunctions from "./string_functions.js"
    // Only change code above this line

    stringFunctions.uppercaseString("hello");
    stringFunctions.lowercaseString("WORLD!");

    Here's another example. Dont forget it has to have ./ before file name.
    import * as myMathModule from "./math_functions.js";

24. Create an Export Fallback with export default
Notes:
    Default export adds a fallback value for a module or file.
    Below is a regular function:

    function subtract(x, y) {
    return x - y;
    } 
    Now we will add default export fallback
    export default function subtract(x, y) {
    return x - y;
    }

25. Import a Default Export
Notes: 
    Here is how to import a default export from question 24. 

    import subtract from "./math_functions.js"
    // Only change code above this line

    subtract(7,4);

26. Create a JavaScript Promise
Notes: promises are useed to make a promise, usually asynchronously.
    Promise is a constructor function so u use the new keyword e.g. 
    new Promise . Resolve parameter is used when you want your promise to 
    succeed. Reject is used when you want it to fail. 
    Here is an example below. 
    const makeServerRequest = new Promise((resolve, reject) => {

    });

27. Complete a Promise with resolve and reject
Notes: 
    A promise has three states: pending, fulfilled, rejected. The previous
    promise in Q.26 will always be pending because there's no way to complete
    the promise. 
    Here's an example of completing a promise with resolve and reject.
    const makeServerRequest = new Promise((resolve, reject) => {
    // responseFromServer represents a response from a server
    let responseFromServer;
        
    if(responseFromServer) {
    resolve("We got the data");
    } else {  
        reject("Data not received");
    }
    return responseFromServer;
    });

28. Handle a Fulfilled Promise with then
Notes: 
    Then is used to action it to do something when the promised is resolved. 
    In this case it console logs the result which is "We got the data"
    const makeServerRequest = new Promise((resolve, reject) => {
    // responseFromServer is set to true to represent a successful response from a server
    let responseFromServer = true;
        
    if(responseFromServer) {
        resolve("We got the data");
    } else {  
        reject("Data not received");
    }
    });

    makeServerRequest.then(result => {
    console.log(result);
    });

29. Handle a rejected promise with catch
Notes: 
    Catch is used to action a promise that is rejected. It happens right after
    the rejection is called. 
    Here's an example of how of syntax: 

    const makeServerRequest = new Promise((resolve, reject) => {
    // responseFromServer is set to false to represent an unsuccessful response from a server
    let responseFromServer = false;
        
    if(responseFromServer) {
        resolve("We got the data");
    } else {  
        reject("Data not received");
    }
    });

    makeServerRequest.then(result => {
    console.log(result);
    makeServerRequest.catch(error => {
    console.log(error);
    })
    });














                Started Debugging:

                Notes: 

Useful to console.log() 
    To check that previous calculations are
    performing correctly. Console also has console.warn() and console.clear().
    console.clear(); clears the log. 

Below are examples of typeof:
    let myVar1 = "3";
    let myVar2 = 2;
    console.log(typeof myVar1);
    console.log(typeof myVar2);
        string
        number

Javascript has 7 immutable datatypes:
    1. Boolean
    2. Null
    3. Undefined
    4. Number
    5. String
    6. Symbol
    7. BigInt

Spelling mistakes will show as reference error and myVar is not defined. 

Always add the second half of pair types () {} [] to avoid forgetting it 
later on.

Don't forget about using the escape key \ when using quotes in a string.
You can also decide to use the different quotes " ''

Remember:
    = is the assignment operator. Equality == and strict equality === are to
    check if something is equal to something else. 

    Dont forget to add parenthesis () to the end of a function or method when 
    delcaring it and also calling it.
    Usually the value returned at end of function is assigned to a variable.

 OBOE
    Off by one errors typically occur in an index of a string or array.
    e.g. for (let i = 1; i < myVar.length ; i++);
    This will skip the first element of the array. Correct code would be
    e.g. for (let i = 0; i < myVar.length; i++);

Caution when reinitialising variable inside a loop.
    In some loops you may need to reinitialize a variable INSIDE the loop
    or even take out the reinitialized variable when it is not needed.
    Example of initializing a variable e.g. let row = [];

Dreaded infinite loops.
    Loops need a terminal condition. Infinite loops are likely to freeze or 
    crash the browser. 

















                Data structures:

                Arrays()

Assign variable to element in an array 
    const myArray = [1, 2, 3, 4, 5];
    const myVar = myArray[1];
    myVar is now = 2

Change an element inside array index
    const myArray = [1, 2, 3, 4, 5];
    myArray[1] = "Billy";
    console.log(myArray)
    [1, "Billy, 3, 4, 5];

Add elements to the start of array
    myArray.unshift("Billy", 7);

Add elements to end of array
    myArray.push("myString", 7);

Remove element from start of array. 
    Note: it can only remove one element.
    myArray.shift();

Remove element from end of array.
    Note: it can only remove one element.
    myArray.pop();

Return or assign pop() or shift value to variable
    let myArray = [1, 2, 3, 4];
    let popped = myArray.pop();

Remove middle of array or multiple elements using splice()
Notes: ONLY USABLE IN ARRAYS
    let myArray = ["I", "am", "feeling", "really", "happy"]
    let newArray = myArray.splice(3, 2);

    console.log(newArray);
    ["really", "happy"]
    console.log(myArray)
    ["I", "am", "feeling"];

Remove middle elements of array to swap elements using splice()
    const numbers = [10, 11, 12, 12, 15];
    const startIndex = 3;
    const amountToDelete = 1;

    numbers.splice(startIndex, amountToDelete, 13, 14);
    console.log(numbers);

Copy elements of array without changing original using slice()
Notes: CAN BE USED WITH STRINGS TOO
    Note: 
    slice(param1, param2) takes in two parameters, first is when to start
    and the second is when to stop. It excludes the element it stops at. 
    
    let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];
    let todaysWeather = weatherConditions.slice(1, 3);

    console.log(todaysWeather);
    ["snow", "sleet"]
    console.log(weatherConditions);
    ['rain', 'snow', 'sleet', 'hail', 'clear'];

Use spread ... to copy another array into another variable.
It is used to spread or expand iterable objects (like arrays or strings) 
into individual elements.
Some use cases: 
Copying arrays -
    let thisArray = [true, true, undefined, false, null];
    let thatArray = [...thisArray];
merging arrays -
    const arr1 = [1, 2];
    const arr2 = [3, 4];
    const mergedArray = [...arr1, ...arr2];
    console.log(mergedArray); // [1, 2, 3, 4]
Adding elements to an array -
    const originalArray = [1, 2, 3];
    const newArray = [...originalArray, 4, 5];
    console.log(newArray); // [1, 2, 3, 4, 5]
Using with function arguments -
    function sum(a, b, c) {
    return a + b + c;
    }
    const numbers = [1, 2, 3];
    const result = sum(...numbers);
    console.log(result); // 6
Copying objects -
    const originalObj = { name: 'John', age: 30 };
    const copyObj = { ...originalObj };
    console.log(copyObj); // { name: 'John', age: 30 }
Merging objects -
    const obj1 = { a: 1, b: 2 };
    const obj2 = { b: 3, c: 4 };
    const mergedObj = { ...obj1, ...obj2 };
    console.log(mergedObj); // { a: 1, b: 3, c: 4 }

Check For The Presence of an Element With indexOf()
    notes: It will return -1 if the element is not inside array, and 
    it will return the place in the index if element is inside array.

    let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];
    fruits.indexOf('dates');
    fruits.indexOf('oranges');
    fruits.indexOf('pears');

    indexOf('dates') returns -1, indexOf('oranges') returns 2,and 
    indexOf('pears') returns 1 (the first index at which each element exists).

Iterate Through All an Array's Items Using For Loops using every(),
forEach(), map()
    function greaterThanTen(arr) {
    let newArr = [];
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] > 10) {
        newArr.push(arr[i]);
        }
    }
    return newArr;
    }
    greaterThanTen([2, 12, 8, 14, 80, 0, 1]);

Create complex multi-dimensional arrays
    Notes: The very first square bracket is the first level of a 
    multi-dimensional (nested array) the ones that come after are
    the next level. Look at where "Array" is on the following examples.
    First level: let myArr = ["Array"];
    Second level: let myArr = ["Bob", "Billy", ["Array"]];
    Third level: let myArr = ["Bob", "Billy", ["Jean", "Jack", ["Array"]]];
    




                    Objects!

Notes:
    Objects are property-value stores. An intuitive way to structure data. 
    They have a very fast look-up time. 

Add Properties (keys) and their corresponding values to objects
Notes: Don't forget when using bracket notation to put strings '' around the 
property (key).
    1. tekkenCharacter.origin = 'South Korea';

    2. tekkenCharacter['hair color'] = 'dyed orange';

Notes about objects:
properties themselves can include parentheses {} after a property
to further nest data inside a single property. These values can contain
any data type that Javascript supports. The value of id below is a number, 
value of date is a string, and the value of data is an object. 
In order to modify busy to 10, nestedObject.data.onlineStatus.busy = 10; e.g.
    let nestedObject = {
    id: 28802695164,
    date: 'December 31, 2016',
    data: {
        totalUsers: 99,
        online: 80,
        onlineStatus: {
        active: 67,
        away: 13,
        busy: 8
        }
    }
    };

Access Property names with bracket notations:
    let foods = {
    apples: 25,
    oranges: 32,
    plums: 28,
    bananas: 13,
    grapes: 35,
    strawberries: 27
    };

    function checkInventory(scannedItem) {
    // Only change code below this line
    let scanned = foods[scannedItem]
    // Only change code above this line
    return scanned;
    }
    console.log(checkInventory("apples"));

Delete Object properties using Delete keyword
    To remove apples property (also known as key) from foods object, see below:
    delete foods.apples;

    Bracket notation can also work e.g.
    delete foods['oranges'];

Check if an Object has a Property:
Notes: Javascript has two ways to check. 1. hasOwnProperty() and 2. in keyword.
e.g.
    1. users.hasOwnProperty('Alan');

    2. 'Alan' in users;

Iterate through all keys in an object with a for in loop
    const refrigerator = {
    'milk': 1,
    'eggs': 12,
    };

    for (const food in refrigerator) {
    console.log(food, refrigerator[food]);
    }
    This code logs milk 1 and eggs 12, with each key-value pair on its own line.

Generate an Array of All Object Keys with Object.keys()
Notes: Gather all properties in an object and put them into an array: Object.keys();
The targeted object is used as an argument. Object.keys(myObject);
    let users = {
    Alan: {
        age: 27,
        online: false
    },
    Jeff: {
        age: 32,
        online: true
    },
    Sarah: {
        age: 48,
        online: false
    },
    Ryan: {
        age: 19,
        online: true
    }
    };

    function getArrayOfUsers(obj) {
    // Only change code below this line
    const allUsers = Object.keys(obj);
    return allUsers;
    // Only change code above this line
    }

    console.log(getArrayOfUsers(users));

Modify an array stored in an object:
    let user = {
    name: 'Kenneth',
    age: 28,
    data: {
        username: 'kennethCodesAllDay',
        joinDate: 'March 26, 2016',
        organization: 'freeCodeCamp',
        friends: [
        'Sam',
        'Kira',
        'Tomo'
        ],
        location: {
        city: 'San Francisco',
        state: 'CA',
        country: 'USA'
        }
    }
    };

    function addFriend(userObj, friend) {
    // Only change code below this line
    userObj.data.friends.push(friend);
    return userObj.data.friends
    // Only change code above this line
    }

    console.log(addFriend(user, 'Pete'));




    







    



    
                Basic Algorithym Scripting

Convert Celsius to Fahrenheit
    function convertCtoF(celsius) {
    let fahrenheit;
    fahrenheit = celsius * (9 / 5) + 32;
    return fahrenheit;
    }

    convertCtoF(30);

Reverse a String to make "olleh"
    function reverseString(str) {
    let newStr = "";
    for (let i = str.length -1; i >= 0; i--) {
    newStr += str[i];
    }
    return newStr;

    }
    reverseString("hello");

Factorialize a Number
Notes: 
If the integer is represented with the letter n, a factorial is the 
product of all positive integers less than or equal to n.
Factorials are often represented with the shorthand notation n!
For example: 5! = 1 * 2 * 3 * 4 * 5 = 120
    function factorialize(num) {
    let product = 1;
    for (let i = 1; i <= num; i++) {
        product *= i;
    }
    return product;
    }

    factorialize(5);

Find the Longest Word in a String
    function findLongestWordLength(str) {
    let wordsArray = str.split(" ");
    let maxLength = 0;

    for (let i = 0; i < wordsArray.length; i++) {
        if (wordsArray[i].length > maxLength) {
        maxLength = wordsArray[i].length;
        }
    }

    return maxLength;
    }

    findLongestWordLength("The quick brown fox jumped over the lazy dog");

Return Largest number in arrays
    function largestOfFour(arr) {
    let results = [];
    for (let i = 0; i < arr.length; i++) {
    let largestNum = arr[i][0];
        for (let j = 1; j < arr[i].length; j++) {
        if (arr[i][j] > largestNum) {
            largestNum = arr[i][j];
        }
        }
        results[i] = largestNum;
    } 
    return results;
    }

    largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);

Confirm the Ending of string
    function confirmEnding(str, target) {
    return str.slice(str.length - target.length) == target;

    }
    confirmEnding("Bastian", "n"); 

Repeat a string Repeat a string
    function repeatStringNumTimes(str, num) {
    let combined = "";
    for (let i = 0; i < num; i++) {
    combined += str;
    }
    return combined;
    }

    repeatStringNumTimes("abc", 3);

Truncate a String
    function truncateString(str, num) {
    if (str.length > num) {
        return str.slice(0, num) + "...";
    } else {
        return str;
    }
    }

    truncateString("A-tisket a-tasket A green and yellow basket", 8);

Finders Keepers
    function findElement(arr, func) {
    let num = 0;
    for (let i = 0; i < arr.length; i++) {
        num = arr[i];
        if (func(num)) {
        return num;
        } 
    }
    return undefined;
    }

    findElement([1, 2, 3, 4], num => num % 2 === 0);

Boo who
Check if a value is classified as a boolean primitive Boolean primitives are
true and false.
    function booWho(bool) {
    if (bool === true) {
        return true;
    } else if (bool === false) {
        return true;
    } else {
        return false;
    }
    }

    booWho(null);

Title Case a Sentence
Return provided string with each first letter capitalized and the rest lowercase
    function titleCase(str) {
    
    // console.log(lowerCaseStr);
    let arr = str.split(' '); 

    for (let i = 0; i < arr.length; i++) {
    arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1).toLowerCase();       
    } 

    return arr.join(' '); 
    }

Slice and Splice
Copy the first array into the second, by the index specified. 
    function insertArrayAt(array1, array2, index) {
    // Make a copy of the second array to keep the input arrays unchanged
    const resultArray = array2.slice();

    // Insert elements from the first array into the result array using concat and splice
    resultArray.splice(index, 0, ...array1);

    return resultArray;
    }

    // Example usage:
    const array1 = [1, 2, 3];
    const array2 = [4, 5, 6];
    const index = 2;
    const result = insertArrayAt(array1, array2, index);

    console.log(result); // Output: [4, 5, 1, 2, 3, 6]

Falsy Bouncer
Remove all falsy values from an array
Notes: Falsy values are: False, null, 0, "", undefined, NaN

comment
s
































*/
